include CopyCommon.gmk
include Modules.gmk
include TextFileProcessing.gmk

$(eval $(call IncludeCustomExtension, copy/Copy-java.base.gmk))

################################################################################

ifneq ($(findstring $(OPENJDK_TARGET_OS), windows aix),)

  TZMAPPINGS_SRC := $(TOPDIR)/src/java.base/$(OPENJDK_TARGET_OS)/conf

  $(LIB_DST_DIR)/tzmappings: $(TZMAPPINGS_SRC)/tzmappings
	$(call install-file)

  TARGETS += $(LIB_DST_DIR)/tzmappings

endif

################################################################################
# In jvm.cfg, the first listed KNOWN variant is the default. On most build
# configurations, that is the server variant.
DEFAULT_CFG_VARIANT ?= server

# Any variant other than server, client or minimal is represented as server in
# the cfg file.
VALID_CFG_VARIANTS := server client minimal
CFG_VARIANTS := $(filter $(VALID_CFG_VARIANTS), $(JVM_VARIANTS)) \
    $(if $(filter-out $(VALID_CFG_VARIANTS), $(JVM_VARIANTS)), server)

# Change the order to put the default variant first if present.
ORDERED_CFG_VARIANTS := \
    $(if $(filter $(DEFAULT_CFG_VARIANT), $(CFG_VARIANTS)), $(DEFAULT_CFG_VARIANT)) \
    $(filter-out $(DEFAULT_CFG_VARIANT), $(CFG_VARIANTS))

JVMCFG := $(LIB_DST_DIR)/jvm.cfg

define print-cfg-line
	$(call LogInfo, Adding -$1 $2 to jvm.cfg)
	$(PRINTF) -- "-$1 $2\n" >> $@ $(NEWLINE)
endef

$(JVMCFG): $(call DependOnVariable, ORDERED_CFG_VARIANTS)
	$(call MakeTargetDir)
	$(RM) $@
	$(foreach v, $(ORDERED_CFG_VARIANTS), \
	  $(call print-cfg-line,$v,KNOWN) \
	)
        # If either of server or client aren't present, add IGNORE lines for
        # them.
	$(foreach v, server client, \
	  $(if $(filter $v, $(ORDERED_CFG_VARIANTS)), , \
	    $(call print-cfg-line,$v,IGNORE) \
	  ) \
	)

TARGETS += $(JVMCFG)

################################################################################

$(eval $(call SetupCopyFiles, COPY_NET_PROPERTIES, \
    FILES := $(TOPDIR)/src/java.base/share/conf/net.properties, \
    DEST := $(CONF_DST_DIR), \
))

TARGETS += $(COPY_NET_PROPERTIES)

################################################################################

# JDK license and assembly exception files to be packaged in JMOD

# The license files may not be present if the source has been obtained using a
# different license.
JDK_LICENSE ?= $(wildcard $(TOPDIR)/LICENSE)
JDK_NOTICE  ?= $(wildcard $(TOPDIR)/ASSEMBLY_EXCEPTION)
JDK_ADDITIONAL_LICENSE_INFO  ?= $(wildcard $(TOPDIR)/ADDITIONAL_LICENSE_INFO)

$(eval $(call SetupCopyFiles, COPY_JDK_NOTICES, \
    FILES := $(JDK_LICENSE) $(JDK_NOTICE) $(JDK_ADDITIONAL_LICENSE_INFO), \
    DEST := $(COMMON_LEGAL_DST_DIR), \
    FLATTEN := true, \
))

TARGETS += $(COPY_JDK_NOTICES)

################################################################################
#
# Copy and filter the legal files depending on what 3rd party components are
# bundled or linked from the OS.
#
ifeq ($(USE_EXTERNAL_LIBZ), true)
  LEGAL_EXCLUDES += zlib.md
endif

$(eval $(call SetupCopyLegalFiles, COPY_LEGAL, \
    EXCLUDES := $(LEGAL_EXCLUDES), \
))

TARGETS += $(COPY_LEGAL)

################################################################################
# Optionally copy libffi.so.? into the the image

ifeq ($(ENABLE_LIBFFI_BUNDLING), true)
  $(eval $(call SetupCopyFiles, COPY_LIBFFI, \
      FILES := $(LIBFFI_LIB_FILE), \
      DEST := $(call FindLibDirForModule, $(MODULE)), \
      FLATTEN := true, \
      MACRO := install-file-nolink, \
  ))

  TARGETS += $(COPY_LIBFFI)
endif

################################################################################
# Generate classfile_constants.h

$(eval $(call SetupTextFileProcessing, CREATE_CLASSFILE_CONSTANTS_H, \
    SOURCE_FILES := $(TOPDIR)/src/java.base/share/native/include/classfile_constants.h.template, \
    OUTPUT_FILE := $(SUPPORT_OUTPUTDIR)/modules_include/java.base/classfile_constants.h, \
    REPLACEMENTS := \
        @@VERSION_CLASSFILE_MAJOR@@ => $(VERSION_CLASSFILE_MAJOR) ; \
        @@VERSION_CLASSFILE_MINOR@@ => $(VERSION_CLASSFILE_MINOR) ; , \
))

TARGETS += $(CREATE_CLASSFILE_CONSTANTS_H)
