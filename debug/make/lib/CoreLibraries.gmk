WIN_VERIFY_LIB := $(SUPPORT_OUTPUTDIR)/native/$(MODULE)/libverify/verify.lib

# Hook to include the corresponding custom file, if present.
$(eval $(call IncludeCustomExtension, lib/CoreLibraries.gmk))

##########################################################################################
# libfdlibm is statically linked with libjava below and not delivered into the
# product on its own.

BUILD_LIBFDLIBM_OPTIMIZATION := NONE

ifeq ($(OPENJDK_TARGET_OS), solaris)
  BUILD_LIBFDLIBM_OPTIMIZATION := HIGH
endif

# If FDLIBM_CFLAGS is non-empty we know that we can optimize
# fdlibm when adding those extra C flags. Currently GCC,
# and clang only.
ifneq ($(FDLIBM_CFLAGS), )
  BUILD_LIBFDLIBM_OPTIMIZATION := LOW
endif

LIBFDLIBM_SRC := $(TOPDIR)/src/java.base/share/native/libfdlibm
LIBFDLIBM_CFLAGS := -I$(LIBFDLIBM_SRC) $(FDLIBM_CFLAGS)

ifneq ($(OPENJDK_TARGET_OS), macosx)
  $(eval $(call SetupNativeCompilation, BUILD_LIBFDLIBM, \
      NAME := fdlibm, \
      TYPE := STATIC_LIBRARY, \
      OUTPUT_DIR := $(SUPPORT_OUTPUTDIR)/native/$(MODULE), \
      SRC := $(LIBFDLIBM_SRC), \
      OPTIMIZATION := $(BUILD_LIBFDLIBM_OPTIMIZATION), \
      CFLAGS := $(CFLAGS_JDKLIB) $(LIBFDLIBM_CFLAGS), \
      CFLAGS_windows_debug := -DLOGGING, \
      CFLAGS_aix := -qfloat=nomaf, \
      DISABLED_WARNINGS_gcc := sign-compare misleading-indentation array-bounds, \
      DISABLED_WARNINGS_microsoft := 4146 4244 4018, \
      ARFLAGS := $(ARFLAGS), \
      OBJECT_DIR := $(SUPPORT_OUTPUTDIR)/native/$(MODULE)/libfdlibm, \
  ))

else

  # On macosx the old build does partial (incremental) linking of fdlibm instead of
  # a plain static library.
  $(eval $(call SetupNativeCompilation, BUILD_LIBFDLIBM_MAC, \
      NAME := fdlibm, \
      OUTPUT_DIR := $(SUPPORT_OUTPUTDIR)/native/$(MODULE)/libfdlibm, \
      SRC := $(LIBFDLIBM_SRC), \
      CFLAGS := $(CFLAGS_JDKLIB) $(LIBFDLIBM_CFLAGS), \
      LDFLAGS := -nostdlib $(ARFLAGS), \
      OBJECT_DIR := $(SUPPORT_OUTPUTDIR)/native/$(MODULE)/libfdlibm, \
  ))

  BUILD_LIBFDLIBM := $(SUPPORT_OUTPUTDIR)/native/$(MODULE)/$(LIBRARY_PREFIX)fdlibm$(STATIC_LIBRARY_SUFFIX)
  $(BUILD_LIBFDLIBM): $(BUILD_LIBFDLIBM_MAC)
	$(call install-file)

endif

##########################################################################################

LIBVERIFY_OPTIMIZATION := HIGH
ifneq ($(findstring $(OPENJDK_TARGET_OS), solaris linux), )
  ifeq ($(COMPILE_WITH_DEBUG_SYMBOLS), true)
    LIBVERIFY_OPTIMIZATION := LOW
  endif
endif

$(eval $(call SetupJdkLibrary, BUILD_LIBVERIFY, \
    NAME := verify, \
    OPTIMIZATION := $(LIBVERIFY_OPTIMIZATION), \
    CFLAGS := $(CFLAGS_JDKLIB), \
    DISABLED_WARNINGS_gcc := implicit-fallthrough, \
    DISABLED_WARNINGS_microsoft := 4244 4267, \
    LDFLAGS := $(LDFLAGS_JDKLIB) $(call SET_SHARED_LIBRARY_ORIGIN), \
    LIBS_unix := -ljvm, \
    LIBS_windows := jvm.lib, \
))

TARGETS += $(BUILD_LIBVERIFY)

##########################################################################################

LIBJAVA_CFLAGS := -DARCHPROPNAME='"$(OPENJDK_TARGET_CPU_OSARCH)"'

ifeq ($(OPENJDK_TARGET_OS), macosx)
  BUILD_LIBJAVA_java_props_md.c_CFLAGS := -x objective-c
  BUILD_LIBJAVA_java_props_macosx.c_CFLAGS := -x objective-c
endif

$(eval $(call SetupJdkLibrary, BUILD_LIBJAVA, \
    NAME := java, \
    OPTIMIZATION := HIGH, \
    CFLAGS := $(CFLAGS_JDKLIB) $(LIBJAVA_CFLAGS), \
    System.c_CFLAGS := $(VERSION_CFLAGS), \
    jdk_util.c_CFLAGS := $(VERSION_CFLAGS), \
    EXTRA_HEADER_DIRS := libfdlibm, \
    WARNINGS_AS_ERRORS_xlc := false, \
    DISABLED_WARNINGS_gcc := unused-result, \
    DISABLED_WARNINGS_solstudio := E_STATEMENT_NOT_REACHED, \
    LDFLAGS := $(LDFLAGS_JDKLIB) $(call SET_SHARED_LIBRARY_ORIGIN), \
    LDFLAGS_macosx := -L$(SUPPORT_OUTPUTDIR)/native/$(MODULE)/, \
    LDFLAGS_windows := -delayload:shell32.dll, \
    LIBS_unix := -ljvm -lverify, \
    LIBS_linux := $(LIBDL) $(BUILD_LIBFDLIBM), \
    LIBS_solaris := -lsocket -lnsl -lscf $(LIBDL) $(BUILD_LIBFDLIBM), \
    LIBS_aix := $(LIBDL) $(BUILD_LIBFDLIBM) $(LIBM),\
    LIBS_macosx := -lfdlibm -framework CoreFoundation -framework Foundation -framework Security -framework SystemConfiguration, \
    LIBS_windows := jvm.lib $(BUILD_LIBFDLIBM) $(WIN_VERIFY_LIB) shell32.lib delayimp.lib advapi32.lib version.lib, \
))

TARGETS += $(BUILD_LIBJAVA)

$(BUILD_LIBJAVA): $(BUILD_LIBVERIFY)

$(BUILD_LIBJAVA): $(BUILD_LIBFDLIBM)

##########################################################################################

BUILD_LIBZIP_EXCLUDES :=
ifeq ($(USE_EXTERNAL_LIBZ), true)
  LIBZIP_EXCLUDES += zlib
endif

ifeq ($(LIBZIP_CAN_USE_MMAP), true)
  BUILD_LIBZIP_MMAP := -DUSE_MMAP
endif

$(eval $(call SetupJdkLibrary, BUILD_LIBZIP, \
    NAME := zip, \
    OPTIMIZATION := LOW, \
    EXCLUDES := $(LIBZIP_EXCLUDES), \
    CFLAGS := $(CFLAGS_JDKLIB) \
        $(LIBZ_CFLAGS), \
    CFLAGS_unix := $(BUILD_LIBZIP_MMAP) -UDEBUG, \
    LDFLAGS := $(LDFLAGS_JDKLIB) \
        $(call SET_SHARED_LIBRARY_ORIGIN), \
    LIBS_unix := -ljvm -ljava $(LIBZ_LIBS), \
    LIBS_windows := jvm.lib $(WIN_JAVA_LIB), \
))

$(BUILD_LIBZIP): $(BUILD_LIBJAVA)

TARGETS += $(BUILD_LIBZIP)

##########################################################################################

$(eval $(call SetupJdkLibrary, BUILD_LIBJIMAGE, \
    NAME := jimage, \
    TOOLCHAIN := TOOLCHAIN_LINK_CXX, \
    OPTIMIZATION := LOW, \
    CFLAGS := $(CFLAGS_JDKLIB), \
    CXXFLAGS := $(CXXFLAGS_JDKLIB), \
    CFLAGS_unix := -UDEBUG, \
    LDFLAGS := $(LDFLAGS_JDKLIB) $(LDFLAGS_CXX_JDK) \
        $(call SET_SHARED_LIBRARY_ORIGIN), \
    LIBS_unix := -ljvm -ldl $(LIBCXX), \
    LIBS_macosx := -lc++, \
    LIBS_windows := jvm.lib, \
))

$(BUILD_LIBJIMAGE): $(BUILD_LIBJAVA)

TARGETS += $(BUILD_LIBJIMAGE)

##########################################################################################

ifeq ($(call check-jvm-variant, zero), true)
  ERGO_FAMILY := zero
else
  ifeq ($(OPENJDK_TARGET_CPU_ARCH), x86)
    ERGO_FAMILY := i586
  else
    ERGO_FAMILY := $(OPENJDK_TARGET_CPU_ARCH)
  endif
endif
LIBJLI_ALL_ERGO := $(wildcard $(addsuffix /ergo_*.c, $(LIBJLI_SRC_DIRS)))
LIBJLI_EXCLUDE_ERGO := $(filter-out %/ergo_$(ERGO_FAMILY).c, $(LIBJLI_ALL_ERGO))
# If all specialized ergo files are excluded, use generic ergo
ifeq ($(LIBJLI_ALL_ERGO), $(LIBJLI_EXCLUDE_ERGO))
  LIBJLI_CFLAGS += -DUSE_GENERIC_ERGO
endif
LIBJLI_EXCLUDE_FILES += $(notdir $(LIBJLI_EXCLUDE_ERGO))

ifeq ($(OPENJDK_TARGET_OS), macosx)
  LIBJLI_EXCLUDE_FILES += java_md_solinux.c ergo.c ergo_i586.c

  BUILD_LIBJLI_java_md_macosx.c_CFLAGS := -x objective-c
  BUILD_LIBJLI_STATIC_java_md_macosx.c_CFLAGS := -x objective-c

  LIBJLI_CFLAGS += -DPACKAGE_PATH=\"$(PACKAGE_PATH)\"
endif

LIBJLI_CFLAGS_JDKLIB := $(CFLAGS_JDKLIB)
LIBJLI_OUTPUT_DIR := $(INSTALL_LIBRARIES_HERE)/jli

LIBJLI_CFLAGS += $(LIBZ_CFLAGS)

ifneq ($(USE_EXTERNAL_LIBZ), true)
  LIBJLI_EXTRA_FILES += \
      $(addprefix $(TOPDIR)/src/java.base/share/native/libzip/zlib/, \
          inflate.c \
          inftrees.c \
          inffast.c \
          zadler32.c \
          zcrc32.c \
          zutil.c \
      )
endif

$(eval $(call SetupJdkLibrary, BUILD_LIBJLI, \
    NAME := jli, \
    OUTPUT_DIR := $(LIBJLI_OUTPUT_DIR), \
    EXCLUDE_FILES := $(LIBJLI_EXCLUDE_FILES), \
    EXTRA_FILES := $(LIBJLI_EXTRA_FILES), \
    OPTIMIZATION := HIGH, \
    CFLAGS := $(LIBJLI_CFLAGS_JDKLIB) $(LIBJLI_CFLAGS), \
    DISABLED_WARNINGS_solstudio := \
        E_ASM_DISABLES_OPTIMIZATION \
        E_STATEMENT_NOT_REACHED, \
    LDFLAGS := $(LDFLAGS_JDKLIB) \
        $(call SET_SHARED_LIBRARY_ORIGIN), \
    LDFLAGS_linux := $(call SET_SHARED_LIBRARY_ORIGIN,/..), \
    LDFLAGS_solaris := $(call SET_SHARED_LIBRARY_ORIGIN,/..), \
    LIBS_unix := $(LIBZ_LIBS), \
    LIBS_linux := $(LIBDL) -lpthread, \
    LIBS_solaris := $(LIBDL), \
    LIBS_aix := $(LIBDL),\
    LIBS_macosx := -framework Cocoa -framework Security -framework ApplicationServices, \
    LIBS_windows := advapi32.lib comctl32.lib user32.lib, \
))

TARGETS += $(BUILD_LIBJLI)

LIBJLI_SRC_DIRS := $(call FindSrcDirsForComponent, java.base, libjli)

ifeq ($(OPENJDK_TARGET_OS), macosx)
  # On macosx they do partial (incremental) linking of libjli_static.a
  # code it here...rather than add support to NativeCompilation
  # as this is first time I see it
  $(eval $(call SetupNativeCompilation, BUILD_LIBJLI_STATIC, \
      NAME := jli_static, \
      OUTPUT_DIR := $(SUPPORT_OUTPUTDIR)/native/$(MODULE), \
      SRC := $(LIBJLI_SRC_DIRS), \
      EXCLUDE_FILES := $(LIBJLI_EXCLUDE_FILES), \
      EXTRA_FILES := $(LIBJLI_EXTRA_FILES), \
      OPTIMIZATION := HIGH, \
      CFLAGS := $(LIBJLI_CFLAGS_JDKLIB) $(LIBJLI_CFLAGS) \
          $(addprefix -I, $(LIBJLI_SRC_DIRS)), \
      LDFLAGS := -nostdlib $(ARFLAGS), \
      OBJECT_DIR := $(SUPPORT_OUTPUTDIR)/native/$(MODULE)/libjli_static, \
  ))

  ifeq ($(STATIC_BUILD), true)
    TARGETS += $(BUILD_LIBJLI_STATIC)
  else
    $(SUPPORT_OUTPUTDIR)/native/$(MODULE)/libjli_static.a: $(BUILD_LIBJLI_STATIC)
	$(call install-file)

    TARGETS += $(SUPPORT_OUTPUTDIR)/native/$(MODULE)/libjli_static.a
  endif

endif
